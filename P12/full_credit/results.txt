====================
HOMEWORK P12 RESULTS
====================

Spring 2023

NOTE: We will not be grading for "correct" answers, since your results may vary, but rather answers that are consistent with your measured results.

IMPORTANT: If at all possible, time your program on a machine with at least 4 cores. (CSE VM may be configured to use multiple cores in the VirtualBox properties panel.)

FULL CREDIT
===========

QUESTION 1: Which puzzle did you use as ThreadsOfSudoku's parameter to achieve a 30+ second runtime (using "real"): 14_zeros

QUESTION 2: Provide the full ``time`` output for your program, with 1 to 16 threads. It may prove interesting to screenshot your system monitor while these run. You may be able to run all of these with a single bash command if you like (replace 14_zeros with your puzzle from QUESTION 1): 

for i in {1..16} ; do printf "\n Threads %d:\n" $i ; time (java ThreadsOfSudoku $i puzzle.txt 14_zeros > temp.txt) ; done

Example Timing (first 2 of 16 runs only on Antares):

ricegf@antares$ for i in {1..16} ; do printf "\n Threads %d:\n" $i ; time (java ThreadsOfSudoku $i puzzle.txt 14_zeros > temp.txt) ; done

 Threads 1:

real	2m0.684s
user	2m0.919s
sys	0m0.292s

 Threads 2:

real	1m4.553s
user	2m7.003s
sys	0m0.252s



YOUR Timing: 

 Threads 1:

real	2m3.852s
user	1m59.118s
sys	0m4.259s

 Threads 2:

real	1m44.216s
user	1m42.202s
sys	0m2.841s

 Threads 3:

real	1m57.939s
user	1m55.151s
sys	0m3.885s

 Threads 4:

real	1m46.648s
user	1m44.515s
sys	0m3.076s

 Threads 5:

real	1m47.396s
user	1m45.639s
sys	0m2.539s

 Threads 6:

real	1m46.359s
user	1m43.909s
sys	0m3.364s

 Threads 7:

real	1m49.668s
user	1m46.981s
sys	0m3.693s

 Threads 8:

real	1m46.885s
user	1m44.055s
sys	0m3.841s

 Threads 9:

real	1m45.646s
user	1m43.344s
sys	0m3.245s

 Threads 10:

real	1m46.089s
user	1m44.730s
sys	0m2.210s

 Threads 11:

real	1m45.017s
user	1m42.724s
sys	0m3.225s

 Threads 12:

real	1m44.786s
user	1m42.494s
sys	0m3.309s

 Threads 13:

real	1m52.617s
user	1m49.431s
sys	0m4.366s

 Threads 14:

real	1m54.408s
user	1m50.955s
sys	0m4.973s

 Threads 15:

real	1m45.382s
user	1m42.469s
sys	0m3.991s

 Threads 16:

real	1m46.799s
user	1m44.709s
sys	0m3.055s



QUESTION 3: Does adding more threads continue to speed up the program? Do more threads ever slow down the program slightly?  Why or why not?

Adding more threads helped for the first 3 runs, but stayed consistent after 4 threads were involved. Time either when up or down by a few seconds but stayed in the same area. I assume this happens because adding new threads does not change how fast the program runs after 4 threads because only so many threads can work on something at once and the others have to "wait there turn".


QUESTION 4: Does adding more threads increase the "system load", or is it constant regardless of the number of threads?  Why?

Adding more threads keeps the system load relativily consistent by changing anywhere from 0 miliseconds up to 1 second. I assume its for the same reason as question 3.


BONUS
=====

QUESTION 5: Time your thread pool version of ThreadsOfSudoku as you did for the full credit version. Post your timings here.

YOUR Timing:






QUESTION 6: Is a thread pool faster, slower, or roughly equivalent in performance? 



QUESTION 7: Compare the full credit and bonus solution code. Which do you believe is more supportable over a long lifetime of evolving hardware and environments?


